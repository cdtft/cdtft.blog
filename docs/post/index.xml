<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on cdftf@qq.com</title>
    <link>https://cdtft.github.io/cdtft.blog/post/</link>
    <description>Recent content in Articles on cdftf@qq.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Mar 2017 12:00:00 -0500</lastBuildDate>
    
	<atom:link href="https://cdtft.github.io/cdtft.blog/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>BeanFactory的使用</title>
      <link>https://cdtft.github.io/cdtft.blog/post/beanfactory%E7%9A%84%E4%BD%BF%E7%94%A8%E7%96%91%E9%97%AE/</link>
      <pubDate>Mon, 20 Apr 2020 14:04:17 +0800</pubDate>
      
      <guid>https://cdtft.github.io/cdtft.blog/post/beanfactory%E7%9A%84%E4%BD%BF%E7%94%A8%E7%96%91%E9%97%AE/</guid>
      <description>之前翻译过一篇BeanFactory和FactoryBean区别的文章，当一个Bean的初始化逻辑很 复杂的时候可以实现FactoryBean接口来定制Bean的初始化逻辑。
定义FactoryBean bean的定义：
public class Cat { private String name; public String getName() { return name; } public void setName(String name) { this.name = name; } @Override public String toString() { return new StringJoiner(&amp;#34;, &amp;#34;, Cat.class.getSimpleName() + &amp;#34;[&amp;#34;, &amp;#34;]&amp;#34;) .add(&amp;#34;name=&amp;#39;&amp;#34; + name + &amp;#34;&amp;#39;&amp;#34;) .toString(); } } 为Cat实现工厂bean:
@Component public class CatFactoryBean implements FactoryBean&amp;lt;Cat&amp;gt; { @Override public Cat getObject() throws Exception { Cat car = new Cat(); car.setName(&amp;#34;this is create by factory&amp;#34;); return car; } @Override public Class&amp;lt;?</description>
    </item>
    
    <item>
      <title>Mysql抖动</title>
      <link>https://cdtft.github.io/cdtft.blog/post/mysql_%E6%8A%96%E5%8A%A8/</link>
      <pubDate>Sun, 29 Mar 2020 14:28:45 +0800</pubDate>
      
      <guid>https://cdtft.github.io/cdtft.blog/post/mysql_%E6%8A%96%E5%8A%A8/</guid>
      <description>脏页 当内存数据页和磁盘数据也不一致的时候我们称这个内存页为脏页。内存页中的数据写入磁盘后，内存中的数据和磁盘中的数据保持一致称为干净页。
flush 内存页中的数据和磁盘上的数据同步的过程叫flush，这时数据库发生抖动。
数据库flush的四种情况：
 InnoDB 的redo log写满了。 系统的内存页不够用。 MySQL认为系统空闲的时候会将脏页flush。 MySQL正常关闭的时候会将脏页flush。  脏页的比例计算 不要将脏页的比例经常接近75%,计算公式Innodb_buffer_pool_pages_dirty/Innodb_buffer_pool_pages_total
Innodb_buffer_pool_pages_dirty select VARIABLE_VALUE from performance_schema.global_status where VARIABLE_NAME = &amp;#39;Innodb_buffer_pool_pages_dirty&amp;#39;; Innodb_buffer_pool_pages_total select VARIABLE_VALUE from performance_schema.global_status where VARIABLE_NAME = &#39;Innodb_buffer_pool_pages_total&#39;; </description>
    </item>
    
    <item>
      <title>Guide to the Spring BeanFactory(翻译)</title>
      <link>https://cdtft.github.io/cdtft.blog/post/java_spring_beanfactory/</link>
      <pubDate>Tue, 24 Mar 2020 14:35:22 +0800</pubDate>
      
      <guid>https://cdtft.github.io/cdtft.blog/post/java_spring_beanfactory/</guid>
      <description>1.Introduction 这篇文章将关注Spring BeanFactory API BeanFactory接口提供了简单也可以说是复杂的配置机制通过Spring Ioc容器来管理对象。
2.Basic - Beans and Container 简单的说，beans是构成Spring application骨架的java对象，它们被Spring Ioc容器管理。除了用容器管理以外，bean没有什么其他特别的地方。
Spring容器的职责是实例化、配置、组装beans。Spring容器通过阅读配置元信息来实例化、配置、管理我们在程序中定义的对象。
3.Maven Dependencies 让我们添加需要的依赖在pom.xml文件中。我们将用Spring Beans依赖去设置BeanFactory:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-beans&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.1.4.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 4.The BeanFactory Interface 一开始查看org.springframework.beans.factory包中的接口的定义和讨论重要的APIs是很有趣的事情。
4.1The getBean() APIs 各种版本的getBean()方法都返回了指定bean的实例
4.2The containsBean() APIs 这个方法通过提供的名称来确认bean工厂容器中是否存在该名称的bean。该方法确认getBean(java.lang.String)是否能获得给定名称的bean实例。
4.3The isPrototype() API 这个方法确认通过getBean(java.lang.String)方法获得实例是否被设置为prototype类型
需要注意的是如果该方法返回的的是false也不意味着是一个Singleton对象，也可能是是其他scopes non-independent实例。
5.BeanFactory API BeanFactory持有bean的定义，并且当客户端程序请求时实例化 - 意思是：
 关注bean实例化的生命周期，和在适当的时候调用销毁方法。 能够在实例化依赖对象之间建立关联 最重要的的是BeanFactory不支持基于注解配置的依赖注入，但是ApplicationContext则支持。  6.Defining the Bean public class Employee { private String name; private int age; // standard constructors, getters and setters } 7.</description>
    </item>
    
    <item>
      <title>How to use the Spring FactoryBean?(翻译)</title>
      <link>https://cdtft.github.io/cdtft.blog/post/java_spring_factrorybean/</link>
      <pubDate>Tue, 24 Mar 2020 13:50:44 +0800</pubDate>
      
      <guid>https://cdtft.github.io/cdtft.blog/post/java_spring_factrorybean/</guid>
      <description>1. Overview 有两种类型的bean在Spring bean容器中：普通的bean(ordinary bean)和工厂bean(factory bean)。Spring直接使用前者，后者能够产生又Spring管理的对象。简单的说，我们可以通过实现org.springframework.beans.factory.FactoryBean接口来构建一个工程bean。
2. Factory Beans基础 2.1 实现一个FactoryBean 首先来让我们看看FactoryBean接口
public interface FactoryBean { T getObject() throws Exception; Class&amp;lt;?&amp;gt; getObjectType(); boolean isSingleton(); } 让我们详细的看看这个三个方法的功能
 getObject()-返回一个由该工厂产生对象，这个对象将被Spring容器使用 getObjectType()-返回该工厂生产bena对象的类类型 isSingleton()-判断由该工厂产生的bean是否是单例的 接下来我们实现一个FactoryBean实例。实现一个产生Tool类型的ToolFactory。  public class Tool { private int id; // standard constructors, getters and setters } ToolFactory.java:
public class ToolFactory implements FactoryBean&amp;lt;Tool&amp;gt; { private int factoryId; private int toolId; @Override public Tool getObject() throws Exception { return new Tool(toolId); } @Override public Class&amp;lt;?</description>
    </item>
    
    <item>
      <title>单例延迟初始化</title>
      <link>https://cdtft.github.io/cdtft.blog/post/myfirst/</link>
      <pubDate>Mon, 23 Mar 2020 14:40:37 +0800</pubDate>
      
      <guid>https://cdtft.github.io/cdtft.blog/post/myfirst/</guid>
      <description>类会何时被初始化 有一下几种情况类会初始化
 虚拟机启动的时候，初始化用户指定的主类 遇到new 调用静态方法时，初始化该静态方法所在的类 访问静态字段，初始化该静态字段所在的类 子类的初始化触发父类的初始化 定义了default接口，直接实现或间接实现该接口的类初始化会触发该接口的初始化 使用反射API对某个类反射调用时 初次调用Methodhandle实例时，初始化Methodhandle指向的方法所在的类  使用第4条规范实现单例模式 public class Singleton { private Singleton() { } private static class LazyHolder { private final Singleton INSTANCE = new Singleton(); } public static Singleton getInstance() { return LazyHolder.INSTANCE; } } 该单例是线程安全的</description>
    </item>
    
  </channel>
</rss>