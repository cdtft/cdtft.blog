<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on cdftf@qq.com</title>
    <link>https://cdtft.github.io/cdtft.blog/tags/spring/</link>
    <description>Recent content in Spring on cdftf@qq.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 24 Mar 2020 13:50:44 +0800</lastBuildDate>
    
	<atom:link href="https://cdtft.github.io/cdtft.blog/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to use the Spring FactoryBean?(翻译)</title>
      <link>https://cdtft.github.io/cdtft.blog/post/java_spring_factrorybean/</link>
      <pubDate>Tue, 24 Mar 2020 13:50:44 +0800</pubDate>
      
      <guid>https://cdtft.github.io/cdtft.blog/post/java_spring_factrorybean/</guid>
      <description>1. Overview 有两种类型的bean在Spring bean容器中：普通的bean(ordinary bean)和工厂bean(factory bean)。Spring直接使用前者，后者能够产生又Spring管理的对象。简单的说，我们可以通过实现org.springframework.beans.factory.FactoryBean接口来构建一个工程bean。
2. Factory Beans基础 2.1 实现一个FactoryBean 首先来让我们看看FactoryBean接口
public interface FactoryBean { T getObject() throws Exception; Class&amp;lt;?&amp;gt; getObjectType(); boolean isSingleton(); } 让我们详细的看看这个三个方法的功能
 getObject()-返回一个由该工厂产生对象，这个对象将被Spring容器使用 getObjectType()-返回该工厂生产bena对象的类类型 isSingleton()-判断由该工厂产生的bean是否是单例的 接下来我们实现一个FactoryBean实例。实现一个产生Tool类型的ToolFactory。  public class Tool { private int id; // standard constructors, getters and setters } ToolFactory.java:
public class ToolFactory implements FactoryBean&amp;lt;Tool&amp;gt; { private int factoryId; private int toolId; @Override public Tool getObject() throws Exception { return new Tool(toolId); } @Override public Class&amp;lt;?</description>
    </item>
    
  </channel>
</rss>